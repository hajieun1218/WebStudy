<?xml version="1.0" encoding="UTF-8"?>
<!-- 
		XML => 사용자 정의 (지원하는 태그가 없다) : 화면 출력이 아니라 문서에 데이터를 저장하는 목적
										(데이터 저장 : 1. <태그>데이터저장</태그>
												  2. <태그 속성="데이터저장"/>
												  3. <태그 속성="데이터저장">데이터저장</태그>)
										 모든 운영체제에 호환성이 좋다
											=> 언어와 상관없이 파싱(XML의 데이터를 읽는 것) => B2B 
											=> 문서형 데이터베이스 
											=> 단점 : 문서가 길어지면 속도가 늦다
													사용자 정의 => 태그를 알아보기 어려울 수 있다
															   (==> 시멘텍 태그를 사용)
															    HTML5
															    = HTML4 -> 추상적인 태그
															    	<object><embed>
															    = HTML5 -> 알아보기 쉽게 제작
															    	<video><audio>
											=> XML을 이용하는 프로그램
												MyBatis, Spring, Kotlin,
												ajax, react, vue
												=========================
												  JS ===> JSX
												  JavaScript => JavaScript + XML
		1) XML 만드는 방법
			= 태그
				1. 여는 태그 ===========> <table>
				2. 닫는 태그 ===========> </table>
				3. 빈 태그(empty) =====> <br/> <input/> <img/>
			    문법(태그 만드는 방법)
			    1) 최상위 태그를 가지고 있다
			    	<a>aaa</a>
			    	<b>bbb</b>   ===> error
			    	
			    	<c>
			    	   <a>aaa</a>
			    	   <b>bbb</b>
			    	</c>
			    2) 여는태그/닫는태그가 반드시 존재
			  		<a><b><c>aaa</b></c></a>  ==> error
			  	3) 태그나 속성은 대소문자를 구분한다
			  		<a> <A>
			  	4) 속성값은 반드시 ""
			  	5) 태그를 만들 때 숫자 사용이 가능 => 앞에 사용할 수 없다
			  		<1a>(X) => <a1><a2>(O)
			  	6) 키워드는 사용할 수 없다  <xml>
			  	7) 태그는 공백을 줄 수 없다  < a>(X)
			= 속성
		2) DTD 파일
		3) 자바에서 파싱하는 방법
 -->
 
 <!-- 
 		DOM(Document Object Model)
 		= 자바에서 파싱
 		= DOM VS SAX(Spring,MyBatis)
 			DOM : 메모리에 저장 => 제어 (수정,삭제,추가 가능)
 			SAX : 읽기 전용 (수정,삭제,추가 불가)
  -->
 <sawon> <!-- 데이터베이스 테이블 역할 -->
 	<list> <!-- 데이터베이스 ROW 역할 -->
 		<name>홍길동</name> <!-- 데이터베이스 컬럼 역할 -->
 		<addr>서울</addr>
 		<sex>남자</sex>
 	</list>
 	<list>
 		<name>심청이</name>
 		<addr>경기</addr>
 		<sex>여자</sex>
 	</list>
 	<list>
 		<name>박문수</name>
 		<addr>강원</addr>
 		<sex>남자</sex>
 	</list>
 </sawon>